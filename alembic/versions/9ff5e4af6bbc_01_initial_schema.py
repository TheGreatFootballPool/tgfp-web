"""initial schema

Revision ID: 9ff5e4af6bbc
Revises: 
Create Date: 2025-08-26 19:55:50.576136

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '9ff5e4af6bbc'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('apikey',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_apikey_token'), 'apikey', ['token'], unique=True)
    op.create_table('player',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('nick_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('discord_id', sa.BigInteger(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('team',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('city', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('long_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('losses', sa.Integer(), nullable=False),
    sa.Column('short_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('ties', sa.Integer(), nullable=False),
    sa.Column('wins', sa.Integer(), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('logo_url', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tgfp_nfl_team_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('discord_emoji', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('game',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('favorite_team_id', sa.Integer(), nullable=False),
    sa.Column('road_team_id', sa.Integer(), nullable=False),
    sa.Column('home_team_id', sa.Integer(), nullable=False),
    sa.Column('game_status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('spread', sa.Float(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('week_no', sa.Integer(), nullable=False),
    sa.Column('road_team_score', sa.Integer(), nullable=False),
    sa.Column('home_team_score', sa.Integer(), nullable=False),
    sa.Column('season', sa.Integer(), nullable=False),
    sa.Column('tgfp_nfl_game_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['favorite_team_id'], ['team.id'], ),
    sa.ForeignKeyConstraint(['home_team_id'], ['team.id'], ),
    sa.ForeignKeyConstraint(['road_team_id'], ['team.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_game_favorite_team_id'), 'game', ['favorite_team_id'], unique=False)
    op.create_index(op.f('ix_game_home_team_id'), 'game', ['home_team_id'], unique=False)
    op.create_index(op.f('ix_game_road_team_id'), 'game', ['road_team_id'], unique=False)
    op.create_index(op.f('ix_game_season'), 'game', ['season'], unique=False)
    op.create_index(op.f('ix_game_start_time'), 'game', ['start_time'], unique=False)
    op.create_index(op.f('ix_game_tgfp_nfl_game_id'), 'game', ['tgfp_nfl_game_id'], unique=False)
    op.create_index(op.f('ix_game_week_no'), 'game', ['week_no'], unique=False)
    op.create_table('playergamepick',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=False),
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('picked_team_id', sa.Integer(), nullable=False),
    sa.Column('season', sa.Integer(), nullable=False),
    sa.Column('week_no', sa.Integer(), nullable=False),
    sa.Column('is_lock', sa.Boolean(), nullable=False),
    sa.Column('is_upset', sa.Boolean(), nullable=False),
    sa.Column('awarded_points', sa.Integer(), nullable=False),
    sa.Column('is_win', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['game.id'], ),
    sa.ForeignKeyConstraint(['picked_team_id'], ['team.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['player.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('player_id', 'game_id', name='uq_playergamepick_player_game')
    )
    op.create_index(op.f('ix_playergamepick_game_id'), 'playergamepick', ['game_id'], unique=False)
    op.create_index(op.f('ix_playergamepick_picked_team_id'), 'playergamepick', ['picked_team_id'], unique=False)
    op.create_index(op.f('ix_playergamepick_player_id'), 'playergamepick', ['player_id'], unique=False)
    op.create_index(op.f('ix_playergamepick_season'), 'playergamepick', ['season'], unique=False)
    op.create_index(op.f('ix_playergamepick_week_no'), 'playergamepick', ['week_no'], unique=False)
    op.create_index('uq_one_lock_per_week', 'playergamepick', ['player_id', 'season', 'week_no'], unique=True, postgresql_where=sa.text('is_lock = true'))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('uq_one_lock_per_week', table_name='playergamepick', postgresql_where=sa.text('is_lock = true'))
    op.drop_index(op.f('ix_playergamepick_week_no'), table_name='playergamepick')
    op.drop_index(op.f('ix_playergamepick_season'), table_name='playergamepick')
    op.drop_index(op.f('ix_playergamepick_player_id'), table_name='playergamepick')
    op.drop_index(op.f('ix_playergamepick_picked_team_id'), table_name='playergamepick')
    op.drop_index(op.f('ix_playergamepick_game_id'), table_name='playergamepick')
    op.drop_table('playergamepick')
    op.drop_index(op.f('ix_game_week_no'), table_name='game')
    op.drop_index(op.f('ix_game_tgfp_nfl_game_id'), table_name='game')
    op.drop_index(op.f('ix_game_start_time'), table_name='game')
    op.drop_index(op.f('ix_game_season'), table_name='game')
    op.drop_index(op.f('ix_game_road_team_id'), table_name='game')
    op.drop_index(op.f('ix_game_home_team_id'), table_name='game')
    op.drop_index(op.f('ix_game_favorite_team_id'), table_name='game')
    op.drop_table('game')
    op.drop_table('team')
    op.drop_table('player')
    op.drop_index(op.f('ix_apikey_token'), table_name='apikey')
    op.drop_table('apikey')
    # ### end Alembic commands ###
